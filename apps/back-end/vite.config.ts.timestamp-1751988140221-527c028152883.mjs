// vite.config.ts
import { defineConfig } from "file:///home/john-laptop/mykomap-monolith/node_modules/vitest/dist/config.js";
import dts from "file:///home/john-laptop/mykomap-monolith/node_modules/vite-plugin-dts/dist/index.mjs";
import { dirname } from "node:path";
import { fileURLToPath } from "node:url";
import { ReadonlyBuildInfo } from "file:///home/john-laptop/mykomap-monolith/libs/common/dist/common.js";
import { spawnSync } from "node:child_process";
var __vite_injected_original_import_meta_url =
  "file:///home/john-laptop/mykomap-monolith/apps/back-end/vite.config.ts";
var path = fileURLToPath(__vite_injected_original_import_meta_url);
var root = dirname(path);
var name = process.env.npm_package_name;
var __BUILD_INFO__ = new ReadonlyBuildInfo({
  name,
  exec: (cmd, args) => spawnSync(cmd, args).stdout.toString(),
});
__BUILD_INFO__.updatePackageJson();
var vite_config_default = defineConfig({
  define: {
    __BUILD_INFO__,
  },
  plugins: [dts()],
  build: {
    lib: {
      // Could also be a dictionary or array of multiple entry points
      entry: fileURLToPath(import.meta.resolve("./src/index.ts")),
      name,
      formats: ["es"],
      fileName: "back-end",
    },
  },
  server: {
    open: true,
  },
  test: {
    globals: true,
    environment: "node",
    mockReset: true,
  },
  base: "./",
  root,
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvaG9tZS9qb2huLWxhcHRvcC9teWtvbWFwLW1vbm9saXRoL2FwcHMvYmFjay1lbmRcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9ob21lL2pvaG4tbGFwdG9wL215a29tYXAtbW9ub2xpdGgvYXBwcy9iYWNrLWVuZC92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vaG9tZS9qb2huLWxhcHRvcC9teWtvbWFwLW1vbm9saXRoL2FwcHMvYmFjay1lbmQvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZXN0L2NvbmZpZ1wiO1xuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XG5pbXBvcnQgeyBkaXJuYW1lIH0gZnJvbSBcIm5vZGU6cGF0aFwiO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gXCJub2RlOnVybFwiO1xuaW1wb3J0IHsgUmVhZG9ubHlCdWlsZEluZm8gfSBmcm9tIFwiQG15a29tYXAvY29tbW9uXCI7XG5pbXBvcnQgeyBzcGF3blN5bmMgfSBmcm9tIFwibm9kZTpjaGlsZF9wcm9jZXNzXCI7XG5cbmNvbnN0IHBhdGggPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCByb290ID0gZGlybmFtZShwYXRoKTtcblxuLyogR2V0IHRoZSBwYWNrYWdlIG5hbWUuXG4gKlxuICogVGhpcyBjb3VsZCBhbHNvIGJlIGRvbmUgYnkgaW1wb3J0aW5nIHBhY2thZ2UuanNvbiwgYnV0IHRoYXQgaW52b2x2ZXNcbiAqIHNvbWUgdHNjb25maWcuanNvbiBneW1uYXN0aWNzIHdoaWNoIEknZCByYXRoZXIgYXZvaWQ6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vdml0ZWpzL3ZpdGUvZGlzY3Vzc2lvbnMvMTc3MjZcbiAqL1xuY29uc3QgbmFtZSA9IHByb2Nlc3MuZW52Lm5wbV9wYWNrYWdlX25hbWUhO1xuY29uc3QgX19CVUlMRF9JTkZPX18gPSBuZXcgUmVhZG9ubHlCdWlsZEluZm8oe1xuICBuYW1lLFxuICBleGVjOiAoY21kOiBzdHJpbmcsIGFyZ3M6IHN0cmluZ1tdKSA9PiBzcGF3blN5bmMoY21kLCBhcmdzKS5zdGRvdXQudG9TdHJpbmcoKSxcbn0pO1xuXG4vLyBXcml0ZSB0aGUgdmVyc2lvbiBhbmQgc2VudHJ5IHJlbGVhc2UgaW50byBwYWNrYWdlLmpzb25cbl9fQlVJTERfSU5GT19fLnVwZGF0ZVBhY2thZ2VKc29uKCk7XG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBkZWZpbmU6IHtcbiAgICBfX0JVSUxEX0lORk9fXyxcbiAgfSxcbiAgcGx1Z2luczogW2R0cygpXSxcbiAgYnVpbGQ6IHtcbiAgICBsaWI6IHtcbiAgICAgIC8vIENvdWxkIGFsc28gYmUgYSBkaWN0aW9uYXJ5IG9yIGFycmF5IG9mIG11bHRpcGxlIGVudHJ5IHBvaW50c1xuICAgICAgZW50cnk6IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEucmVzb2x2ZShcIi4vc3JjL2luZGV4LnRzXCIpKSxcbiAgICAgIG5hbWUsXG4gICAgICBmb3JtYXRzOiBbXCJlc1wiXSxcbiAgICAgIGZpbGVOYW1lOiBcImJhY2stZW5kXCIsXG4gICAgfSxcbiAgfSxcbiAgc2VydmVyOiB7XG4gICAgb3BlbjogdHJ1ZSxcbiAgfSxcbiAgdGVzdDoge1xuICAgIGdsb2JhbHM6IHRydWUsXG4gICAgZW52aXJvbm1lbnQ6IFwibm9kZVwiLFxuICAgIG1vY2tSZXNldDogdHJ1ZSxcbiAgfSxcbiAgYmFzZTogXCIuL1wiLFxuICByb290LFxufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWtVLFNBQVMsb0JBQW9CO0FBQy9WLE9BQU8sU0FBUztBQUNoQixTQUFTLGVBQWU7QUFDeEIsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyx5QkFBeUI7QUFDbEMsU0FBUyxpQkFBaUI7QUFMOEssSUFBTSwyQ0FBMkM7QUFPelAsSUFBTSxPQUFPLGNBQWMsd0NBQWU7QUFDMUMsSUFBTSxPQUFPLFFBQVEsSUFBSTtBQVF6QixJQUFNLE9BQU8sUUFBUSxJQUFJO0FBQ3pCLElBQU0saUJBQWlCLElBQUksa0JBQWtCO0FBQUEsRUFDM0M7QUFBQSxFQUNBLE1BQU0sQ0FBQyxLQUFhLFNBQW1CLFVBQVUsS0FBSyxJQUFJLEVBQUUsT0FBTyxTQUFTO0FBQzlFLENBQUM7QUFHRCxlQUFlLGtCQUFrQjtBQUdqQyxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixRQUFRO0FBQUEsSUFDTjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFBQSxFQUNmLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQTtBQUFBLE1BRUgsT0FBTyxjQUFjLFlBQVksUUFBUSxnQkFBZ0IsQ0FBQztBQUFBLE1BQzFEO0FBQUEsTUFDQSxTQUFTLENBQUMsSUFBSTtBQUFBLE1BQ2QsVUFBVTtBQUFBLElBQ1o7QUFBQSxFQUNGO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDTixNQUFNO0FBQUEsRUFDUjtBQUFBLEVBQ0EsTUFBTTtBQUFBLElBQ0osU0FBUztBQUFBLElBQ1QsYUFBYTtBQUFBLElBQ2IsV0FBVztBQUFBLEVBQ2I7QUFBQSxFQUNBLE1BQU07QUFBQSxFQUNOO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
