// Fastify plugin autogenerated by fastify-openapi-glue
import openapiGlue, { FastifyOpenapiGlueOptions } from "fastify-openapi-glue";
import * as dotenv from "dotenv";
import { Security } from "./security.js";
import { Service, ServiceOptions } from "./service.js";
import { specification } from "@mykomap/common";
import {
  FastifyInstance,
  FastifyPluginCallback,
  FastifyPluginOptions,
} from "fastify";
import fp from "fastify-plugin";

dotenv.config();

interface MykomapApiPluginOptions extends FastifyPluginOptions {
  // Options for MykomapApiPlugin
  serviceOptions?: ServiceOptions;
}

// As per the guide fpr "Creating a TypeScript Fastify Plugin"
// https://fastify.dev/docs/latest/Reference/TypeScript/#creating-a-typescript-fastify-plugin
declare module "fastify" {
  interface FastifyRequest {}
  interface FastifyReply {}
}

export const pluginApi: FastifyPluginCallback<MykomapApiPluginOptions> = async (
  fastify: FastifyInstance,
  opts: MykomapApiPluginOptions,
) => {
  const pluginOptions: FastifyOpenapiGlueOptions = {
    specification,
    serviceHandlers: new Service({
      options: opts.serviceOptions,
    }),
    securityHandlers: new Security(),
  };
  fastify.register(openapiGlue, { ...pluginOptions, ...opts });
};

export const options: MykomapApiPluginOptions = {
  serviceOptions: {
    dataRoot: process.env.SERVER_DATA_ROOT ?? "data",
  },
  ajv: {
    customOptions: {
      strict: false,
    },
  },
};

export default fp(pluginApi);
